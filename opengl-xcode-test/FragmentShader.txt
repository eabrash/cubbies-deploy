#version 330 core

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform int NUM_LIGHTS;
uniform vec3 LIGHT_POSITION_WORLDSPACE[3];
uniform bool IN_FOCUS;
uniform bool IS_BACKGROUND;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Vertex_Position_In_Worldspace;
in vec3 Normal_worldspace;
in vec3 EyeDirection;
in vec3 LightDirection[3];

// Ouput data
out vec3 color;


void main()
{
    if (IS_BACKGROUND) // The background is not affected by Phong shading
    {
        color = texture( myTextureSampler, UV ).rgb;
    }
    else
    {
        vec3 LightColor = vec3(1,1,1);

        vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb; //The color pulled from the sampler

        vec3 MaterialAmbientColor;

        if (IN_FOCUS)
        {
            MaterialAmbientColor = vec3(0.7,0.6,0.6) * MaterialDiffuseColor; //Dilute version of color the object emits itself
        }
        else
        {
            MaterialAmbientColor = vec3(0.6, 0.6, 0.6) * MaterialDiffuseColor; //Dilute version of color the object emits itself
        }

        vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1); // Color of specular, seems to be gray

        color = MaterialAmbientColor;
        float LightPower = 10.0;

        for (int i = 0; i < NUM_LIGHTS; i++)
        {
            // Distance from the point to the light
            float distance = length(LIGHT_POSITION_WORLDSPACE[i] - Vertex_Position_In_Worldspace);

            vec3 n = normalize(Normal_worldspace);
            vec3 l = normalize(LightDirection[i]);

            vec3 E = normalize(EyeDirection);
            vec3 R = reflect(-l,n);
            float cosAlpha = clamp( dot( E,R ), 0,1 );

            float cosTheta = clamp(dot(n,l), 0, 1);

            if (i == 0)
            {
                LightPower = 4000.0;
            }
            else
            {
                LightPower = 10.0;
            }

            // Output color = color of the texture at the specified UV
            color += MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
        }
    }
}